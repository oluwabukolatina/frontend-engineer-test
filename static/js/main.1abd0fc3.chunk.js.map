{"version":3,"sources":["App.js","Keys.js","serviceWorker.js","index.js"],"names":["App","useState","data","setData","selectMovies","setSelectMovies","isOpen","setIsOpen","movie","setMovie","a","axios","get","response","useEffect","getData","then","features","filter","r","attributes","Type","catch","err","Container","Form","style","marginLeft","marginTop","Group","controlId","Label","Control","as","size","custom","onChange","e","value","target","res","Title","name","map","key","OBJECTID","id","googleMapsApiKey","mapContainerStyle","height","width","zoom","center","lat","lng","length","da","position","Number","geometry","y","x","onClick","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","console","message"],"mappings":"uTAkHeA,EA5GH,WAAO,IAAD,EACUC,mBAAS,IADnB,mBACPC,EADO,KACDC,EADC,OAE0BF,mBAAS,IAFnC,mBAEPG,EAFO,KAEOC,EAFP,OAGcJ,oBAAS,GAHvB,mBAGPK,EAHO,KAGCC,EAHD,OAIYN,mBAAS,IAJrB,mBAIPO,EAJO,KAIAC,EAJA,iDAWd,4BAAAC,EAAA,sEAC2BC,IAAMC,IAAN,+FAD3B,cACUC,EADV,yBAEWA,EAASX,MAFpB,4CAXc,sBAgBdY,qBAAU,YAhBI,2CAiBVC,GAAUC,MAAK,SAAAd,GACPA,EAAKe,WACLd,EAASD,EAAKe,SAAUC,QAAO,SAAAC,GAAC,MAA0B,UAAtBA,EAAEC,WAAWC,SACjDhB,EAAiBH,EAAKe,SAAUC,QAAO,SAAAC,GAAC,MAA0B,UAAtBA,EAAEC,WAAWC,aAI9DC,OAAM,SAAAC,SAIV,IAsCH,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAKC,WAAY,MAC1BC,UAAW,OAEX,kBAACH,EAAA,EAAKI,MAAN,CAAYC,UAAU,kCAClB,kBAACL,EAAA,EAAKM,MAAN,uBACA,kBAACN,EAAA,EAAKO,QAAN,CAAcC,GAAG,SAASC,KAAK,KAAKC,QAAM,EAACC,SA3C1C,SAACC,GAAO,IACdC,EAASD,EAAEE,OAAXD,MACJA,GACCnC,EAAQC,EAAac,QAAO,SAAAsB,GAAG,OAAIA,EAAIpB,WAAWqB,QAAUH,OAwCWI,KAAK,SAChE,0CACCtC,EAAcA,EAAauC,KAAI,SAAAnC,GAAK,OAEjC,4BAAQoC,IAAKpC,EAAMY,WAAWyB,SAAUP,MAAO9B,EAAMY,WAAWqB,MAAOK,GAAG,WAAWtC,EAAMY,WAAWqB,UACtG,QAKZ,kBAAC,IAAD,CACIK,GAAG,gBACHC,iBC3FU,2CD8FV,kBAAC,IAAD,CACID,GAAG,iBACHE,kBAAmB,CACfC,OAAQ,QACRC,MAAO,QAEXC,KAAM,EACNC,OAzFL,CACXC,IAAM,UACNC,KAAM,aAmCHpD,EAAKqD,OACErD,EAAKyC,KAAI,SAAAa,GAAE,OACb,kBAAC,IAAD,CACIC,SAAU,CAACJ,IAAKK,OAAOF,EAAGG,SAASC,GAAIN,IAAKI,OAAOF,EAAGG,SAASE,IAC/DjB,IAAKY,EAAGpC,WAAWyB,SACfiB,QAAS,WATzBrD,EAUqC+C,EAVtBpC,YAWKb,GAAU,KAEjBD,GAAUkD,EAAGpC,WAAWyB,WAAarC,EAAMqC,SAAU,kBAAC,IAAD,CACjDY,SAAU,CAACJ,IAAKK,OAAOF,EAAGG,SAASC,GAAIN,IAAKI,OAAOF,EAAGG,SAASE,KAEhE,6BACI,+BAAQrD,EAAMiC,SAEP,SAKpB,SEzDKsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB1D,MAAK,SAAA2D,GACJA,EAAaC,gBAEdtD,OAAM,SAAAuD,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1abd0fc3.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport axios from 'axios'\nimport {Container, Form} from \"react-bootstrap\";\nimport { GoogleMap, LoadScript, Marker, InfoWindow } from '@react-google-maps/api'\nimport {GOOGLE_API_KEY} from \"./Keys\";\n\nconst App = () => {\n    const [data, setData] = useState([]);\n    const [selectMovies, setSelectMovies] = useState([])\n    const [isOpen, setIsOpen] = useState(false)\n    const [movie, setMovie] = useState({})\n\n    const center = {\n        lat: \t35.106766,\n        lng: -106.629181\n    };\n\n    async function getData() {\n        const response = await axios.get(`https://c2t-cabq-open-data.s3.amazonaws.com/film-locations-json-all-records_03-19-2020.json`);\n        return response.data\n    }\n\n    useEffect(() => {\n        getData().then(data => {\n            if (data.features) {\n                setData((data.features).filter(r => r.attributes.Type === \"Movie\"));\n                setSelectMovies((data.features).filter(r => r.attributes.Type === \"Movie\"))\n\n            }\n\n        }).catch(err => {\n            if (err) {\n            }\n        });\n    }, []);\n\n    const onChange = (e) => {\n        const {value} = e.target;\n        if(value){\n            setData(selectMovies.filter(res => res.attributes.Title === value));\n        }\n\n    };\n\n    const getSelectedMovie = (param) => {\n        setMovie(param.attributes)\n    };\n\n    const displayMap = () => {\n        if(data.length){\n           return data.map(da => (\n                <Marker\n                    position={{lat: Number(da.geometry.y), lng: Number(da.geometry.x)}}\n                    key={da.attributes.OBJECTID}\n                        onClick={() => {\n                            getSelectedMovie(da);\n                            setIsOpen(true)\n                        }}>\n                    {isOpen && da.attributes.OBJECTID === movie.OBJECTID? <InfoWindow\n                         position={{lat: Number(da.geometry.y), lng: Number(da.geometry.x)}}\n                    >\n                        <div>\n                            <small>{movie.Title}</small>\n                        </div>\n                    </InfoWindow>: null}\n\n                </Marker>\n            ))\n        }\n        return null\n    };\n\n    return (\n        <Container>\n            <Form style={{    marginLeft: '67%',\n                marginTop: '3%' }}>\n\n                <Form.Group controlId=\"exampleForm.SelectCustomSizeLg\">\n                    <Form.Label>Select A Movie</Form.Label>\n                    <Form.Control as=\"select\" size=\"lg\" custom onChange={onChange} name=\"title\">\n                        <option>Choose</option>\n                        {selectMovies ?selectMovies.map(movie => (\n\n                            <option key={movie.attributes.OBJECTID} value={movie.attributes.Title} id=\"titleId\">{movie.attributes.Title}</option>\n                        )): null}\n\n                    </Form.Control>\n                </Form.Group>\n            </Form>\n                <LoadScript\n                    id=\"script-loader\"\n                    googleMapsApiKey={GOOGLE_API_KEY}\n                >\n\n                    <GoogleMap\n                        id='ground-example'\n                        mapContainerStyle={{\n                            height: \"700px\",\n                            width: \"100%\"\n                        }}\n                        zoom={9}\n                        center={center}\n                    >\n\n                        {displayMap()}\n\n                    </GoogleMap>\n                </LoadScript>\n\n\n        </Container>\n    );\n};\n\nexport default App;","export const GOOGLE_API_KEY = 'AIzaSyBu0SE7j9ZIX8Pxl_htyuM21IAUQhzSBBQ'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}